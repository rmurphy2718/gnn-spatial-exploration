#
# Create a pytorch geometric dataset from the California Precipitation data that was pre-processed in R.
#
import torch
import torch_geometric
import numpy as np
import networkx as nx
import os
from torch_geometric.data import InMemoryDataset


def load_csv(filename):
    """ Load a CSV (features or target) that was generated by R in the pre-processing step """
    if os.path.exists(filename):
        dat = np.loadtxt(filename, skiprows=1, delimiter=',', usecols=1)
    else:
        raise FileNotFoundError(filename)

    return dat


def create_pyg(features, targets, graph):
    """
    Creates a PyTorch geometric graph from other formats
    :param features: A numpy array containing vertex features
    :param targets: A numpy array containing the target to predict at each vertex
    :param graph: A networkx graph
    :return: Graph g with Tensor attributes and PyTorch-Geometric-style edge-index.
    """
    assert isinstance(targets, np.ndarray) and isinstance(features, np.ndarray)
    g = torch_geometric.utils.from_networkx(graph)
    g.x = torch.from_numpy(features).unsqueeze(1).float()
    g.y = torch.from_numpy(targets).float()

    assert g.is_undirected()  # Sanity check.

    return g


class CaRain(InMemoryDataset):
    """
    Convert the California Rain data into a PyTorch geometric dataset,
    following the instructions and conventions here:
    https://pytorch-geometric.readthedocs.io/en/latest/notes/create_dataset.html
    """
    def __init__(self, root, transform=None, pre_transform=None):
        # Parent constructor checks for processed file.
        # If it doesn't exist, call process below
        # If it does, simply load it.
        super(CaRain, self).__init__(root, transform, pre_transform)
        self.data, self.slices = torch.load(self.processed_paths[0])

    @property
    def raw_file_names(self):
        return [f'raw/{s}' for s in ('targets.csv', 'features.csv', 'ca_distance_graph.graphml')]

    @property
    def processed_file_names(self):
        """ Name of converted PyTorch object in 'processed/' dir.  If it exists, skip the processing method. """
        return ['data.pt']

    def process(self):
        """ Create a PyTorch Geometric object from the pre-processed R files, save to disk in 'processed/' dir."""
        # Load features, targets, and graph
        target_name, features_name, graph_name = tuple(self.raw_file_names)
        x = load_csv(features_name)
        y = load_csv(target_name)

        if os.path.exists(graph_name):
            # Load into list to follow convention, though not necessary
            data_list = [nx.read_graphml(graph_name)]
        else:
            raise FileNotFoundError(graph_name)

        # Convert into a graph object
        if self.pre_transform is not None:
            data_list = [self.pre_transform(x, y, data_list[0])]  # Next step expects a list

        # Convert into PyTorch Geometric internal format (automatically creates processed/ dir)
        data, slices = self.collate(data_list)
        torch.save((data, slices), self.processed_paths[0])


if __name__ == "__main__":
    # Can call the constructor here to test or
    # pre-build before the analysis notebook
    CaRain(".", pre_transform=create_pyg)
